/*
 Config file for nextflow pipeline. Edit parameters and options here to customize 
 pipeline behavior, not in main.nf
 */

//
// FILE OPTIONS
// Pipeline input and output file options
//
params {
    // Max resource options
    max_memory      = '128.GB'
    max_cpus        = 28
    max_time        = '36.h'

    // Pipeline General parameters
    reads           = "$projectDir/data/"                   // Specify input folder of reads
    outdir          = "$projectDir/results/"                // Specify where pipeline's outermost output folder should be
    target_file     = "$projectDir/Angio353.fasta"          // Specify fasta file containig target enrichment baits

    // Quality control options
    run_trimmomatic             = true                              // When true, will run trimmomatic on raw reads 
    run_qc_reports              = true                              // If set to true, will not run FastQC or MultiQC processes
    trimmomatic_adapter         = "$projectDir/TruSeq3-PE.fa"       // File containing adapter sequences to search for in Trimmomatic 
}

//
// FUNCTION TO MAKE SURE RESOURCE REQUIREMENTS DONT GO BEYOND
// WHAT IS SET IN PARAMETERS
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}



//
// EXECUTOR AND RESOURCE CONFIGURATION
//

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'   ) }
    }
    
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }
}



profiles {
	standard {
		process.executor = 'local'	
	}

	sge {
        process.executor = 'sge'
	}

    docker {
        docker.enabled      = true   
        conda.enabled       = false
    }

    conda { 
        docker.enabled      = false
        conda.enbaled       = true
        conda.useMamba      = true
    }

}






/*
 * PROCESS OPTIONS
 * Edit process specific options
 * TO DO: add more customizability
 */

// Trimmomatic options
process {
    withName: 'TRIMMOMATIC' {
        ext.args = { [ 
            '-phred33',
            'LEADING:3',
            'TRAILING:3',
            'SLIDINGWINDOW:5:20',
            'MINLEN:36'
        ].join(' ') }

        publishDir = [
            path: "${params.outdir}/trimmed_reads"
        ] 
    }
}

// FastQC and MultiQC Options
if (!params.skip_qc_reports){
    process {
        withName: 'FASTQC' {
            publishDir = [
                path: "${params.outdir}/qc/fastqc"
            ]
        }

        withName: 'MULTIQC' {
            publishDir = [
                path: "${params.outdir}/qc"
            ]
        }
    }
}

// HybPiper Options
process {
    withName: 'ASSEMBLE' {
        ext.args = { [
            '--bwa'
        ].join(' ') }

        publishDir = [
            path: "${params.outdir}/assemblies"
        ]
    }
}


/*
 * Set up computer resource options following
 * TO DO: These are all obviously specific to my local machine, expand to work on HPC's and include time
 */

/*
*executor {
*    $local {
*        cpus = 14
*        memory = '28 GB'
*    }
*}
*
*process {
*    cpus = 1
*    memory = 2G
*
*    withLabel:process_single {
*        cpus   = 1
*        memory = 4G 
*    }
*
*    withLabel:process_low {
*        cpus   = 4
*        memory = 4G
*    }
*
*    withLabel:process_medium {
*        cpus = 8
*        memory = 12G
*    }
*    
*    withLabel:process_high {
*        cpus = 14
*        memory = 28G
*    } 
*}
**/


/*
 * Docker and related permissions
 * TO DO: NEED TO FIX THIS!
 */ 
//docker.runOptions = '-u $(id -u):$(id -g)'
//process.container = 'john2018330/lobeliad_phylogenomics:0.1'
//docker.enabled = true
//docker.runOptions = '--user root'
